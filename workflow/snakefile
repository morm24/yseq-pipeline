import pandas as pd 
from pathlib import Path

#define config file
configfile: "./config/config.yaml"

#load sample ID and corresponding reference to map
samples_df = pd.DataFrame(pd.read_csv("./config/samples.csv"))
yseqids = samples_df["YSEQID"].to_list()
refs = samples_df["REF"].to_list()  

wildcard_constraints:
    YSEQID = r"\d{1,6}"

    #REF = "hg38|hs1",

# Create a list of tuples for wildcards
wildcards = [(yseqid, ref) for yseqid, ref in zip(yseqids, refs)]

# global variables for path prefixes:
results_prefix = Path(config["RESULTS_PATH"]).resolve() / "{YSEQID}" / "{REF}"
resources_prefix = Path("resources").resolve()
ref_prefix = Path(config["REF_PATH"]).resolve()
log_prefix = Path(config["LOG_PATH"]).resolve()
tmp_prefix =  Path(config["TMP_PATH"]).resolve()
sample_prefix = Path(config["SAMPLE_PATH"]).resolve()  / "{YSEQID}"

missing = []
missing_bool = False
for yid in set(yseqids):
    file_prefix = expand(sample_prefix, YSEQID=yid)[0] + "/" + str(yid)
    #print (file_prefix)
    if not (Path(file_prefix + "_R1.fastq.gz").exists() or Path(file_prefix + "_R2.fastq.gz").exists()):
        missing.append(str(yid) + " fastq.gz Files")
        missing_bool = True
for ref in set(refs):
    file_prefix = (str(ref_prefix) + "/" + ref + "/" + ref)
    #print (file_prefix)
    if not (Path(file_prefix + ".fa").exists() or Path(file_prefix + ".fasta").exists()):
        missing.append(ref + ".fa Fasta fles")
        missing_bool = True
if missing_bool:
    print("Can't locate:")
    for x in missing:
        print(x) 
    print("Did you copy the right files / filenames?\nAre symlinks broken?")
    exit()

rule all:
    input:
        expand(results_prefix / "mapping" / "tview_{YSEQID}_{REF}.sh",                  zip, YSEQID=yseqids, REF=refs), # pick row-wise 
        expand(results_prefix / "mapping" / "{YSEQID}_bwa-mem_{REF}_chrY.bam",          zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "mapping" / "{YSEQID}_bwa-mem_{REF}_chrM.bam",          zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "mapping" / "{YSEQID}_{REF}_mapping_stats.txt",         zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "snp_calling" / "chrY_INDELs_{YSEQID}_{REF}.gz",        zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "cladefinder" / "{YSEQID}_{REF}_PHYLOEQ_SNPS.tsv",      zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "cladefinder" / "{YSEQID}_{REF}_DOWNSTR_SNPS.tsv",      zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "call_chr_snps" / "all_chr_snps_{YSEQID}_{REF}.vcf.gz", zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix  / "snp_calling" /  "chrY_novel_SNPs_{YSEQID}_{REF}.tsv", zip, YSEQID=yseqids, REF=refs),
        expand(results_prefix / "cladefinder" / "{YSEQID}_{REF}_addAlleles.tsv",        zip, YSEQID=yseqids, REF=refs)


include: "rules/map_fastq.smk"
include: "rules/create_easy_tview.smk"
include: "rules/get_sample_snps.smk"
include: "rules/get_mtdifferences.smk"
include: "rules/cladefinder.smk"
include: "rules/all_chr_snps.smk"